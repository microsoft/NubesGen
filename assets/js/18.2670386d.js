(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{418:function(e,t,a){"use strict";a.r(t);var s=a(56),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"gitops-with-nubesgen-quick-start"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitops-with-nubesgen-quick-start"}},[e._v("#")]),e._v(" GitOps with NubesGen quick start")]),e._v(" "),a("h2",{attrs:{id:"introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),a("p",[e._v("When using GitOps, Terraform will use "),a("a",{attrs:{href:"https://www.terraform.io/docs/language/settings/backends/azurerm.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("an Azure backend"),a("OutboundLink")],1),e._v(" to lock its state while it is being updated, as several GitHub Actions runs can occur in parallel.")]),e._v(" "),a("p",[e._v("This makes this setup far more robust than running Terraform manually, but adds a bit more complexity, as a specific resource group and a specific storage account need to created.")]),e._v(" "),a("p",[e._v("The following steps will guide you through creating those resources, and authorizing GitHub Actions to perform Azure resource management on your behalf.")]),e._v(" "),a("h2",{attrs:{id:"configure-gitops-in-5-steps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configure-gitops-in-5-steps"}},[e._v("#")]),e._v(" Configure GitOps in 5 steps")]),e._v(" "),a("p",[a("em",[e._v("Prerequisites")])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("You can go to "),a("a",{attrs:{href:"https://shell.azure.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://shell.azure.com"),a("OutboundLink")],1),e._v(" and login with the Azure subscription you want to use. This will provide you with the\nmandatory prerequisites below (Bash, Azure CLI, and GitHub CLI).")])]),e._v(" "),a("p",[e._v("For setting up GitOps (using the NubesGen CLI or the manual installation), you need to have installed and configured the following tools:")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://fr.wikipedia.org/wiki/Bourne-Again_shell",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bash"),a("OutboundLink")],1),e._v(", which is installed by default on most Linux distributions and on Mac OS X. If you're using Windows, one solution is to use "),a("a",{attrs:{href:"https://aka.ms/nubesgen-install-wsl",target:"_blank",rel:"noopener noreferrer"}},[e._v("WSL"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://aka.ms/nubesgen-install-az-cli",target:"_blank",rel:"noopener noreferrer"}},[e._v("Azure CLI"),a("OutboundLink")],1),e._v(". To login, use "),a("code",[e._v("az login")]),e._v(".")]),e._v(" "),a("li",[e._v("(optional) "),a("a",{attrs:{href:"https://cli.github.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub CLI"),a("OutboundLink")],1),e._v(". To login, use "),a("code",[e._v("gh auth login")]),e._v(". This will automate creating the GitHub secrets for you, otherwise you will need to do it manually.")])]),e._v(" "),a("h3",{attrs:{id:"automatic-installation-with-the-nubesgen-cli"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#automatic-installation-with-the-nubesgen-cli"}},[e._v("#")]),e._v(" Automatic Installation (with the NubesGen CLI)")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("Full documentation for the NubesGen CLI is available "),a("RouterLink",{attrs:{to:"/getting-started/cli/"}},[e._v("here")]),e._v(".")],1)]),e._v(" "),a("ol",[a("li",[e._v("Create a GitHub repository to work in (or select one that you already created), and clone it on your local computer.")]),e._v(" "),a("li",[e._v("Open up a terminal in the repository you just cloned, and setup GitOps using the NubesGen CLI:")])]),e._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[e._v("Installing and running the CLI with Java")]),e._v(" "),a("p",[e._v("To run the Java archive, you need to have a Java Virtual Machine (version 11 or higher) installed.")]),e._v(" "),a("ul",[a("li",[e._v("Download the latest release: "),a("code",[e._v("gh release download --repo microsoft/nubesgen --pattern='nubesgen-cli-*.jar'")])]),e._v(" "),a("li",[e._v("Setup GitOps: "),a("code",[e._v("java -jar nubesgen-*.jar gitops")])])])]),e._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[e._v("Installing and running the CLI on Linux")]),e._v(" "),a("p",[e._v("To run the binary on Linux, you need to:")]),e._v(" "),a("ul",[a("li",[e._v("Download the latest release: "),a("code",[e._v("gh release download --repo microsoft/nubesgen --pattern='nubesgen-cli-linux'")])]),e._v(" "),a("li",[e._v("Make the binary executable: "),a("code",[e._v("chmod +x nubesgen-cli-linux")])]),e._v(" "),a("li",[e._v("Setup GitOps: "),a("code",[e._v("./nubesgen-cli-linux gitops")])])])]),e._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[e._v("Installing and running the CLI on a Mac OS")]),e._v(" "),a("p",[e._v("To run the binary on a Mac OS, you need to:")]),e._v(" "),a("ul",[a("li",[e._v("Download the latest release: "),a("code",[e._v("gh release download --repo microsoft/nubesgen --pattern='nubesgen-cli-macos'")])]),e._v(" "),a("li",[e._v("If on Apple Silicon, install Rosetta if it's not already installed: "),a("code",[e._v("/usr/sbin/softwareupdate --install-rosetta --agree-to-license")])]),e._v(" "),a("li",[e._v("Make the binary executable: "),a("code",[e._v("chmod +x nubesgen-cli-macos")])]),e._v(" "),a("li",[e._v("Allow Mac OS X to execute it: "),a("code",[e._v("xattr -d com.apple.quarantine nubesgen-cli-macos")])]),e._v(" "),a("li",[e._v("Setup GitOps: "),a("code",[e._v("./nubesgen-cli-macos gitops")])])])]),e._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[e._v("Installing and running the CLI on Windows")]),e._v(" "),a("p",[e._v("To run the binary on Windows, you need to:")]),e._v(" "),a("ul",[a("li",[e._v("Download the latest release: "),a("code",[e._v("gh release download --repo microsoft/nubesgen --pattern='nubesgen-cli-windows.exe'")])]),e._v(" "),a("li",[e._v("Setup GitOps; "),a("code",[e._v("nubesgen-cli-windows gitops")])])])]),e._v(" "),a("p",[e._v("To learn more about the NubesGen CLI, "),a("RouterLink",{attrs:{to:"/getting-started/cli/"}},[e._v("read the project documentation here")]),e._v(", or run the CLI using the "),a("code",[e._v("-h")]),e._v(" flag.")],1),e._v(" "),a("p",[e._v("If you do not want to use the CLI beyond this setup, you can safely delete it after this step.")]),e._v(" "),a("ol",[a("li",[e._v("Go to "),a("a",{attrs:{href:"https://nubesgen.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://nubesgen.com/"),a("OutboundLink")],1),e._v(" to create your Terraform configuration, and select the "),a("code",[e._v("GitOps")]),e._v(" option. Download the generated file and unzip it inside the Git repository you have just cloned.")]),e._v(" "),a("li",[e._v("You can now push the NubesGen code to your repository, for example by typing "),a("code",[e._v("git add . && git commit -m 'Configure GitOps with NubesGen' && git push")]),e._v(".")]),e._v(" "),a("li",[e._v("To use the new GitOps features, follow "),a("a",{attrs:{href:"/gitops/gitops-overview"}},[e._v("GitOps overview")]),e._v(" and create a specific branch, for example\n"),a("code",[e._v("git checkout -b env-test && git push --set-upstream origin env-test")])])]),e._v(" "),a("h3",{attrs:{id:"manual-installation-without-the-nubesgen-cli"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#manual-installation-without-the-nubesgen-cli"}},[e._v("#")]),e._v(" Manual Installation (without the NubesGen CLI)")]),e._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[e._v("This setup only replaces step 2 of the automatic installation, described above (click to expand)")]),e._v(" "),a("p",[e._v("Instead of running the NubesGen CLI, you will manually create one Azure Storage account, and two GitHub secrets.")]),e._v(" "),a("p",[e._v("Here is the shell script you will need to execute, with documentation for each command being executed:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#####")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Configure the following environment variables to suit your needs.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#####")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The resource group used by Terraform to store its remote state.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("RESOURCE_GROUP_NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("rg-terraform-001\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The location of the resource group. For example `eastus`.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("LOCATION")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("eastus\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The storage account (inside the resource group) used by Terraform to store its remote state.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("TF_STORAGE_ACCOUNT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("st"),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$RANDOM")]),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$RANDOM")]),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$RANDOM")]),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$RANDOM")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The container name (inside the storage account) used by Terraform to store its remote state.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CONTAINER_NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("tfstate\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#####")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Execute the following commands to set up GitOps.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#####")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Create a new Azure Resource Group")]),e._v("\naz group create --name "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$RESOURCE_GROUP_NAME")]),e._v(" --location "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$LOCATION")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Create the Storage Account")]),e._v("\naz storage account create --resource-group "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$RESOURCE_GROUP_NAME")]),e._v(" --name "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$TF_STORAGE_ACCOUNT")]),e._v(" --sku Standard_LRS --allow-blob-public-access "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v(" --encryption-services blob\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Get the Storage Account key")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("ACCOUNT_KEY")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("az storage account keys list --resource-group $RESOURCE_GROUP_NAME --account-name $TF_STORAGE_ACCOUNT --query "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'[0].value'")]),e._v(" -o tsv"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Create a Blob Container in the Storage Account")]),e._v("\naz storage container create --name "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CONTAINER_NAME")]),e._v(" --account-name "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$TF_STORAGE_ACCOUNT")]),e._v(" --account-key "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$ACCOUNT_KEY")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Create a Virtual Network")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("VNET")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("vnet-"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$TF_STORAGE_ACCOUNT")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("SUBNET")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("snet-"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$TF_STORAGE_ACCOUNT")]),e._v("\naz network vnet create --resource-group "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$RESOURCE_GROUP_NAME")]),e._v(" --name "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$VNET")]),e._v(" --subnet-name "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$SUBNET")]),e._v("\naz network vnet subnet update --resource-group "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$RESOURCE_GROUP_NAME")]),e._v(" --name "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$SUBNET")]),e._v(" --vnet-name "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$VNET")]),e._v(" --service-endpoints "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Microsoft.Storage"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Secure the storage account in the Virtual Network")]),e._v("\naz storage account network-rule "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v("  --resource-group "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$RESOURCE_GROUP_NAME")]),e._v(" --account-name "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$TF_STORAGE_ACCOUNT")]),e._v(" --vnet-name "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$VNET")]),e._v(" --subnet "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$SUBNET")]),e._v("\naz storage account update  --resource-group "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$RESOURCE_GROUP_NAME")]),e._v(" --name "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$TF_STORAGE_ACCOUNT")]),e._v(" --default-action Deny --bypass None\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Get the subscription ID")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("SUBSCRIPTION_ID")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("az account show --query "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v(" --output tsv --only-show-errors"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Create a service principal")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("SERVICE_PRINCIPAL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("az ad sp create-for-rbac --role"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Contributor"')]),e._v(" --scopes"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/subscriptions/'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$SUBSCRIPTION_ID")]),e._v('"')]),e._v(" --sdk-auth --only-show-errors"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Get the current GitHub remote repository")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("REMOTE_REPO")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" config --get remote.origin.url"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set the two GitHub secrets")]),e._v("\ngh secret "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" AZURE_CREDENTIALS -b"),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$SERVICE_PRINCIPAL")]),e._v('"')]),e._v(" -R "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$REMOTE_REPO")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" gh secret "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" TF_STORAGE_ACCOUNT -b"),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$TF_STORAGE_ACCOUNT")]),e._v('"')]),e._v(" -R "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$REMOTE_REPO")]),e._v("\n")])])])]),e._v(" "),a("p",[a("strong",[e._v("Congratulations, you have set up GitOps with NubesGen on your project!")])]),e._v(" "),a("h2",{attrs:{id:"using-the-gitops-workflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-the-gitops-workflow"}},[e._v("#")]),e._v(" Using the GitOps workflow")]),e._v(" "),a("p",[e._v("As described in the "),a("a",{attrs:{href:"/gitops/gitops-overview"}},[e._v("GitOps overview")]),e._v(", each time you create an "),a("code",[e._v("env-*")]),e._v(" branch in Git, a new environment will be created for you.")]),e._v(" "),a("p",[e._v("That environment is an Azure resource group, containing all the resources configured with Terraform. When that environment is created, and each time you "),a("code",[e._v("git push")]),e._v(" to that branch, two things will happen:")]),e._v(" "),a("ul",[a("li",[e._v("The GitHub Action will apply the current Terraform configuration, so that your Azure resource group is synchronized with the configuration store in Git.")]),e._v(" "),a("li",[e._v("The GitHub Action will then package and deploy the code stored in the Git branch, so that code runs on the infrastructure that was configured in the previous step.")])])])}),[],!1,null,null,null);t.default=n.exports}}]);