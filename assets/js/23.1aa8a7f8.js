(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{421:function(e,t,o){"use strict";o.r(t);var a=o(56),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"using-docker-with-nubesgen"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#using-docker-with-nubesgen"}},[e._v("#")]),e._v(" Using Docker with NubesGen")]),e._v(" "),o("p",[e._v("Docker is the default option with NubesGen, and allows to run any kind of application supporting Docker.")]),e._v(" "),o("p",[e._v('It comes with two options: "Docker with a Dockerfile" and "Docker with Spring Boot".')]),e._v(" "),o("h2",{attrs:{id:"tutorial-running-a-docker-image-with-nubesgen"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#tutorial-running-a-docker-image-with-nubesgen"}},[e._v("#")]),e._v(" Tutorial: running a Docker image with NubesGen")]),e._v(" "),o("p",[e._v("We're going to deploy "),o("a",{attrs:{href:"https://github.com/jdubois/golang-sample-app",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/jdubois/golang-sample-app"),o("OutboundLink")],1),e._v(", which is a sample application written in Go.\nWe'll use NubesGen's "),o("a",{attrs:{href:"/gitops/gitops-overview"}},[e._v("GitOps support")]),e._v(" to automatically build and deploy the application.")]),e._v(" "),o("p",[o("strong",[e._v("Prerequisites:")])]),e._v(" "),o("p",[o("em",[e._v("Tip: You can go to "),o("a",{attrs:{href:"https://aka.ms/nubesgen-azure-shell",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://aka.ms/nubesgen-azure-shell"),o("OutboundLink")],1),e._v(" to have those prerequisites installed, and run the script from a Web browser.")])]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"https://fr.wikipedia.org/wiki/Bourne-Again_shell",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bash"),o("OutboundLink")],1),e._v(", which is installed by default on most Linux distributions and on Mac OS X. If you're using Windows, one solution is to use "),o("a",{attrs:{href:"https://aka.ms/nubesgen-install-wsl",target:"_blank",rel:"noopener noreferrer"}},[e._v("WSL"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("li",[o("a",{attrs:{href:"https://aka.ms/nubesgen-install-az-cli",target:"_blank",rel:"noopener noreferrer"}},[e._v("Azure CLI"),o("OutboundLink")],1),e._v(". To login, use "),o("code",[e._v("az login")]),e._v(".")]),e._v(" "),o("li",[e._v("(optional) "),o("a",{attrs:{href:"https://cli.github.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub CLI"),o("OutboundLink")],1),e._v(". To login, use "),o("code",[e._v("gh auth login")]),e._v(".")])]),e._v(" "),o("p",[o("strong",[e._v("Steps:")])]),e._v(" "),o("ol",[o("li",[e._v("Fork the project on your GitHub account.")]),e._v(" "),o("li",[e._v("Clone the fork on your computer. Change "),o("code",[e._v("<your-github-account>")]),e._v(" by the name of your GitHub account:"),o("div",{staticClass:"language-bash extra-class"},[o("pre",{pre:!0,attrs:{class:"language-bash"}},[o("code",[o("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/"),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("your-github-account"),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("/golang-sample-app.git\n")])])])]),e._v(" "),o("li",[e._v("In the cloned project ("),o("code",[e._v("cd golang-sample-app")]),e._v("), set up GitOps with NubesGen by using the NubesGen CLI ("),o("RouterLink",{attrs:{to:"/gitops/gitops-quick-start/"}},[e._v("more information here")]),e._v("):"),o("div",{staticClass:"language-bash extra-class"},[o("pre",{pre:!0,attrs:{class:"language-bash"}},[o("code",[e._v(" ./nubesgen-cli-linux gitops\n")])])])],1),e._v(" "),o("li",[e._v("Use the command-line with NubesGen ("),o("RouterLink",{attrs:{to:"/reference/rest-api/"}},[e._v("more information here")]),e._v(") to generate a NubesGen configuration:"),o("div",{staticClass:"language-bash extra-class"},[o("pre",{pre:!0,attrs:{class:"language-bash"}},[o("code",[o("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"https://nubesgen.com/demo.tgz?application=app_service.standard&gitops=true"')]),e._v(" "),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("tar")]),e._v(" -xzvf -\n")])])])],1),e._v(" "),o("li",[e._v("Create a new branch called "),o("code",[e._v("env-dev")]),e._v(", and push your code:"),o("div",{staticClass:"language-bash extra-class"},[o("pre",{pre:!0,attrs:{class:"language-bash"}},[o("code",[o("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout -b env-dev\n"),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit -m "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Configure GitOps with NubesGen'")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push --set-upstream origin env-dev\n")])])])]),e._v(" "),o("li",[e._v("Go to your GitHub project, and check that the GitHub Action is running.")]),e._v(" "),o("li",[e._v("You can go to the "),o("a",{attrs:{href:"https://aka.ms/nubesgen-portal",target:"_blank",rel:"noopener noreferrer"}},[e._v("Azure Portal"),o("OutboundLink")],1),e._v(" to check the created resources.")]),e._v(" "),o("li",[e._v("The application should be deployed on your App Service instance. Its URL should be in the form "),o("code",[e._v("https://app-demo-XXXX-XXXX-XXXX-XXXX-dev-001.azurewebsites.net/")]),e._v(',\nand you can also find it in the GitHub Action workflow (Job: "display-information", step "Display Azure infrastructure information"), or in the Azure portal.\nAs it is a simple application, it should print by default '),o("code",[e._v("Hello, world")]),e._v(".")]),e._v(" "),o("li",[e._v("Once you have finished, you should clean up your resources:")]),e._v(" "),o("li",[e._v("Delete the resource group that was created by NubesGen to host your resources, which is named "),o("code",[e._v("rg-demo-XXXX-XXXX-XXXX-XXXX-001")]),e._v(".")]),e._v(" "),o("li",[e._v("Delete the storage account used to store your Terraform state, in the "),o("code",[e._v("rg-terraform-001")]),e._v(" resource group.")])]),e._v(" "),o("h2",{attrs:{id:"which-azure-resources-are-created"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#which-azure-resources-are-created"}},[e._v("#")]),e._v(" Which Azure resources are created")]),e._v(" "),o("p",[e._v("NubesGen will generate:")]),e._v(" "),o("ul",[o("li",[e._v("An "),o("a",{attrs:{href:"https://aka.ms/nubesgen-app-service-plans",target:"_blank",rel:"noopener noreferrer"}},[e._v("Azure App Service plan"),o("OutboundLink")],1),e._v(" to define the type of App Service instance you will use.")]),e._v(" "),o("li",[e._v("An "),o("a",{attrs:{href:"https://aka.ms/nubesgen-app-service",target:"_blank",rel:"noopener noreferrer"}},[e._v("Azure App Service instance"),o("OutboundLink")],1),e._v(", configured to run your Docker image.")]),e._v(" "),o("li",[e._v("An "),o("a",{attrs:{href:"https://aka.ms/nubesgen-container-registry",target:"_blank",rel:"noopener noreferrer"}},[e._v("Azure Container Registry instance"),o("OutboundLink")],1),e._v(" to store your Docker images.")])]),e._v(" "),o("h2",{attrs:{id:"configuration-options"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#configuration-options"}},[e._v("#")]),e._v(" Configuration options")]),e._v(" "),o("p",[e._v("In the generated "),o("code",[e._v("terraform/modules/app-service/main.tf")]),e._v(" file, NubesGen will configure some environment variables\nfor your application.")]),e._v(" "),o("h3",{attrs:{id:"important-options"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#important-options"}},[e._v("#")]),e._v(" Important options")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("WEBSITES_PORT")]),e._v(" is the port that will be exposed by your Docker image. By default it is set to "),o("code",[e._v("8080")]),e._v(", but if your Docker image uses port "),o("code",[e._v("1337")]),e._v(" instead, you will need to reconfigure this accordingly.")]),e._v(" "),o("li",[o("code",[e._v("DOCKER_REGISTRY_SERVER_URL")]),e._v(", "),o("code",[e._v("DOCKER_REGISTRY_SERVER_USERNAME")]),e._v(" and "),o("code",[e._v("DOCKER_REGISTRY_SERVER_PASSWORD")]),e._v(" are used to access the Docker container registry. If you want to use another registry, you need to modify those variables accordingly.")])]),e._v(" "),o("h3",{attrs:{id:"other-options"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#other-options"}},[e._v("#")]),e._v(" Other options")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("DATABASE_URL")]),e._v(": the URL to your database")]),e._v(" "),o("li",[o("code",[e._v("DATABASE_USERNAME")]),e._v(": the database user name")]),e._v(" "),o("li",[o("code",[e._v("DATABASE_PASSWORD")]),e._v(": the database password")]),e._v(" "),o("li",[o("code",[e._v("REDIS_HOST")]),e._v(": the Redis host name")]),e._v(" "),o("li",[o("code",[e._v("REDIS_PASSWORD")]),e._v(": the Redis password")]),e._v(" "),o("li",[o("code",[e._v("REDIS_PORT")]),e._v(": the Redis port (by default "),o("code",[e._v("6380")]),e._v(")")]),e._v(" "),o("li",[o("code",[e._v("AZURE_STORAGE_ACCOUNT_NAME")]),e._v(": the storage account name")]),e._v(" "),o("li",[o("code",[e._v("AZURE_STORAGE_ACCOUNT_KEY")]),e._v(": the storage account key")]),e._v(" "),o("li",[o("code",[e._v("AZURE_STORAGE_BLOB_ENDPOINT")]),e._v(": the blob storage endpoint")]),e._v(" "),o("li",[o("code",[e._v("MONGODB_DATABASE")]),e._v(": the MongoDB database name")]),e._v(" "),o("li",[o("code",[e._v("MONGODB_URI")]),e._v(": the MongoDB database URL")])]),e._v(" "),o("h2",{attrs:{id:"using-a-dockerfile-vs-using-spring-boot"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#using-a-dockerfile-vs-using-spring-boot"}},[e._v("#")]),e._v(" Using a Dockerfile vs using Spring Boot")]),e._v(" "),o("p",[e._v("Using a Dockerfile is the default way to use Docker, so this will work in most situations. NubesGen will build your project using the standard "),o("code",[e._v("docker build")]),e._v(" command.")]),e._v(" "),o("p",[e._v("Spring Boot is a Java framework that can use a Dockerfile, but which uses by default a Maven plugin: this is supported by NubesGen if you select that option, in which case the Docker image will be built using the "),o("code",[e._v("mvn spring-boot:build-image")]),e._v(" command.")]),e._v(" "),o("p",[e._v("If you have selected Spring Boot, NubesGen will also configure the same configuration properties as the ones described in "),o("RouterLink",{attrs:{to:"/runtimes/spring-boot/"}},[e._v("Spring Boot with NubesGen")]),e._v(".\nFor example, your database should be automatically configured.")],1)])}),[],!1,null,null,null);t.default=r.exports}}]);