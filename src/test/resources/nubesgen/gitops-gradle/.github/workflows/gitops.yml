name: GitOps

###
# GitOps - automatic infrastructure management GitHub Action
#
# See https://github.com/microsoft/NubesGen/blob/main/docs/gitops-overview.md
# for more information about using GitOps with NubesGen.
###

on:
  push:
    branches:
      - 'env-*'

jobs:
  manage-infrastructure:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set environment variables
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          TAG_NAME=${GITHUB_REF#refs/*/}
          echo "ENVIRONMENT=${TAG_NAME:4}" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=$(echo $AZURE_CREDENTIALS | jq -r .clientId)" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$(echo $AZURE_CREDENTIALS | jq -r .subscriptionId)" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(echo $AZURE_CREDENTIALS | jq -r .tenantId)" >> $GITHUB_ENV
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Initialize Terraform
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          TF_STORAGE_ACCOUNT: ${{ secrets.TF_STORAGE_ACCOUNT }}
        run: |
          export ARM_CLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r .clientSecret)
          terraform init \
          -input=false \
          -backend-config="resource_group_name=rg-terraform-001" \
          -backend-config="storage_account_name=$TF_STORAGE_ACCOUNT" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=$ENVIRONMENT.terraform.tfstate"
        working-directory: '${{ github.workspace }}/terraform'
      - name: Apply Terraform
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          TF_STORAGE_ACCOUNT: ${{ secrets.TF_STORAGE_ACCOUNT }}
        run: |
          export ARM_CLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r .clientSecret)
          terraform apply \
          -input=false \
          -auto-approve \
          -var="environment=$ENVIRONMENT"
        working-directory: '${{ github.workspace }}/terraform'
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build with Gradle
        run: gradle build -Pprod,azure
      - name: Temporarily save package
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: '${{ github.workspace }}/build/libs/*.[j,w]ar'
          retention-days: 1
  deploy:
    needs: [manage-infrastructure, build]
    runs-on: ubuntu-20.04
    steps:
      - name: Set environment variables
        run: |
          TAG_NAME=${GITHUB_REF#refs/*/}
          echo "ENVIRONMENT=${TAG_NAME:4}" >> $GITHUB_ENV
      - uses: actions/download-artifact@v2
        with:
          name: package
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: 'Deploy to Azure App Service'
        uses: azure/webapps-deploy@v2
        with:
          app-name: app-nubesgen-gitops-gradle-${{ env.ENVIRONMENT }}-001
          package: '*'
