{{=<% %>=}}
name: GitOps

###
# GitOps - automatic infrastructure management GitHub Action
#
# See https://github.com/microsoft/NubesGen/blob/main/docs/gitops-overview.md
# for more information about using GitOps with NubesGen.
###

on:
  push:
    branches:
      - 'env-*'
<%#runtimeDotnet%>

env:
  DOTNET_VERSION: '3.1'
  APP_PACKAGE_PATH: '.' # set this to the path to your web app project, defaults to the repository root
<%/runtimeDotnet%>

jobs:
  manage-infrastructure:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set environment variables
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          TAG_NAME=${GITHUB_REF#refs/*/}
          echo "ENVIRONMENT=${TAG_NAME:4}" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=$(echo $AZURE_CREDENTIALS | jq -r .clientId)" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$(echo $AZURE_CREDENTIALS | jq -r .subscriptionId)" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(echo $AZURE_CREDENTIALS | jq -r .tenantId)" >> $GITHUB_ENV
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Initialize Terraform
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          TF_STORAGE_ACCOUNT: ${{ secrets.TF_STORAGE_ACCOUNT }}
        run: |
          export ARM_CLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r .clientSecret)
          terraform init \
          -input=false \
          -backend-config="resource_group_name=rg-terraform-001" \
          -backend-config="storage_account_name=$TF_STORAGE_ACCOUNT" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=$ENVIRONMENT.terraform.tfstate"
        working-directory: '${{ github.workspace }}/terraform'
      - name: Apply Terraform
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          TF_STORAGE_ACCOUNT: ${{ secrets.TF_STORAGE_ACCOUNT }}
        run: |
          export ARM_CLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r .clientSecret)
          terraform apply \
          -input=false \
          -auto-approve \
          -var="environment=$ENVIRONMENT"
        working-directory: '${{ github.workspace }}/terraform'
<%#runtimeDocker%>
  <%#applicationTypeAppService%>
  build:
    needs: manage-infrastructure
    runs-on: ubuntu-20.04
    env:
      APPLICATION_NAME: '<% applicationName %>'
      CONTAINER_REGISTRY: '<% containerRegistry %>'
    steps:
      - name: Set environment variables
        run: |
          TAG_NAME=${GITHUB_REF#refs/*/}
          echo "ENVIRONMENT=${TAG_NAME:4}" >> $GITHUB_ENV
      - name: Checkout code
        uses: actions/checkout@v2
    <%#runtimeSpring%>
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        run: mvn spring-boot:build-image -Pprod,azure -Dspring-boot.build-image.imageName=acr${{ env.CONTAINER_REGISTRY }}${{ env.ENVIRONMENT }}001.azurecr.io/${{ env.APPLICATION_NAME }}/${{ env.APPLICATION_NAME }}:${{ github.sha }}
    <%/runtimeSpring%>
    <%^runtimeSpring%>
      - name: Build with Docker
        run: docker build -t acr${{ env.CONTAINER_REGISTRY }}${{ env.ENVIRONMENT }}001.azurecr.io/${{ env.APPLICATION_NAME }}/${{ env.APPLICATION_NAME }}:${{ github.sha }} .
    <%/runtimeSpring%>
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Push to Azure Container Registry
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          az acr login -n acr${{ env.CONTAINER_REGISTRY }}${{ env.ENVIRONMENT }}001.azurecr.io
          docker push acr${{ env.CONTAINER_REGISTRY }}${{ env.ENVIRONMENT }}001.azurecr.io/${{ env.APPLICATION_NAME }}/${{ env.APPLICATION_NAME }}:${{ github.sha }}
  deploy:
    needs: build
    runs-on: ubuntu-20.04
    env:
      APPLICATION_NAME: '<% applicationName %>'
      CONTAINER_REGISTRY: '<% containerRegistry %>'
    steps:
      - name: Set environment variables
        run: |
          TAG_NAME=${GITHUB_REF#refs/*/}
          echo "ENVIRONMENT=${TAG_NAME:4}" >> $GITHUB_ENV
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'app-<% applicationName %>-${{ env.ENVIRONMENT }}-001'
          images: 'acr${{ env.CONTAINER_REGISTRY }}${{ env.ENVIRONMENT }}001.azurecr.io/${{ env.APPLICATION_NAME }}/${{ env.APPLICATION_NAME }}:${{ github.sha }}'
  <%/applicationTypeAppService%>
<%/runtimeDocker%>
<%#runtimeJava%>
  <%#applicationTypeAppService%>
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
    <%#runtimeMaven%>
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        run: mvn package -Pprod,azure
      - name: Temporarily save package
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: '${{ github.workspace }}/target/*.[j,w]ar'
          retention-days: 1
    <%/runtimeMaven%>
    <%#runtimeGradle%>
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build with Gradle
        run: gradle build -Pprod,azure
      - name: Temporarily save package
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: '${{ github.workspace }}/build/libs/*.[j,w]ar'
          retention-days: 1
    <%/runtimeGradle%>
  deploy:
    needs: [manage-infrastructure, build]
    runs-on: ubuntu-20.04
    steps:
      - name: Set environment variables
        run: |
          TAG_NAME=${GITHUB_REF#refs/*/}
          echo "ENVIRONMENT=${TAG_NAME:4}" >> $GITHUB_ENV
      - uses: actions/download-artifact@v2
        with:
          name: package
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: 'Deploy to Azure App Service'
        uses: azure/webapps-deploy@v2
        with:
          app-name: app-<% applicationName %>-${{ env.ENVIRONMENT }}-001
          package: '*'
  <%/applicationTypeAppService%>
  <%#applicationTypeFunction%>
  build-and-deploy:
    needs: manage-infrastructure
    runs-on: ubuntu-20.04
    env:
      APPLICATION_NAME: '<% applicationName %>'
    steps:
      - name: Set environment variables
        run: |
          TAG_NAME=${GITHUB_REF#refs/*/}
          echo "ENVIRONMENT=${TAG_NAME:4}" >> $GITHUB_ENV
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
    <%#runtimeMaven%>
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build and deploy with Maven
        run: |
          mvn package azure-functions:deploy -Pprod,azure -DskipTests \
          -DfunctionResourceGroup=rg-${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-001 \
          -DfunctionAppName=func-${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-001
    <%/runtimeMaven%>
    <%#runtimeGradle%>
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build and deploy with Gradle
        run: |
          gradle build azureFunctionsDeploy -Pprod,azure \
          -DfunctionResourceGroup=rg-${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-001 \
          -DfunctionAppName=func-${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-001
    <%/runtimeGradle%>
  <%/applicationTypeFunction%>
<%/runtimeJava%>
<%#runtimeDotnet%>
  build:
      runs-on: ubuntu-20.04
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
        - name: Set up .NET ${{ env.DOTNET_VERSION }}
          uses: actions/setup-dotnet@v1
          with:
            dotnet-version: ${{ env.DOTNET_VERSION }}
  <%#applicationTypeAppService%>
        - name: Build .NET app
          working-directory: ${{ env.APP_PACKAGE_PATH }}
          run: dotnet build --configuration Release
        - name: Publish .NET app
          run: dotnet publish -c Release -o output
          working-directory: ${{ env.APP_PACKAGE_PATH }}
  <%/applicationTypeAppService%>
  <%#applicationTypeFunction%>
        - name: Build .NET app
          working-directory: ${{ env.APP_PACKAGE_PATH }}
          run: dotnet build --configuration Release -o output
  <%/applicationTypeFunction%>
        - name: Temporarily save package
          uses: actions/upload-artifact@v2
          with:
            name: package
            path: '${{ env.APP_PACKAGE_PATH }}/output'
            retention-days: 1
  deploy:
    needs: [manage-infrastructure, build]
    runs-on: ubuntu-20.04
    steps:
      - name: Set environment variables
        run: |
          TAG_NAME=${GITHUB_REF#refs/*/}
          echo "ENVIRONMENT=${TAG_NAME:4}" >> $GITHUB_ENV
      - uses: actions/download-artifact@v2
        with:
          name: package
          path: ./output
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
  <%#applicationTypeAppService%>
      - name: 'Deploy to Azure App Service'
        uses: azure/webapps-deploy@v2
        with:
          app-name: app-<% applicationName %>-${{ env.ENVIRONMENT }}-001
          package: './output'
  <%/applicationTypeAppService%>
  <%#applicationTypeFunction%>
      - name: 'Deploy to Azure Functions'
        uses: Azure/functions-action@v1
        with:
          app-name: func-<% applicationName %>-${{ env.ENVIRONMENT }}-001
          package: './output'
  <%/applicationTypeFunction%>
<%/runtimeDotnet%>
<%#runtimeNodejs%>
  build-and-deploy:
    needs: manage-infrastructure
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Cache NPM packages
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install NPM
        run: npm ci
      - name: Build the application
        run: npm run build
      - name: Run tests
        run: npm run test
      - name: Set environment variables
        run: |
          TAG_NAME=${GITHUB_REF#refs/*/}
          echo "ENVIRONMENT=${TAG_NAME:4}" >> $GITHUB_ENV
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
  <%#applicationTypeAppService%>
      - name: 'Deploy to Azure App Service'
        uses: azure/webapps-deploy@v2
        with:
          app-name: app-<% applicationName %>-${{ env.ENVIRONMENT }}-001
          package: '.'
  <%/applicationTypeAppService%>
  <%#applicationTypeFunction%>
      - name: 'Deploy to Azure Functions'
        uses: Azure/functions-action@v1
        with:
          app-name: func-<% applicationName %>-${{ env.ENVIRONMENT }}-001
          package: '.'
  <%/applicationTypeFunction%>
<%/runtimeNodejs%>
