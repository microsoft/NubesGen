// App Service - Bicep module
// Generated by NubesGen (www.nubesgen.com)
@description('The name of your application')
param applicationName string

@description('The environment (dev, test, prod, ...')
@maxLength(4)
param environment string = 'dev'

@description('The number of this specific instance')
@maxLength(3)
param instanceNumber string = '001'

@description('The Azure region where all resources in this example should be created')
param location string

@description('An array of NameValues that needs to be added as environment variables')
param environmentVariables array

@description('A list of tags to apply to the resources')
param resourceTags object

var appServicePlanName = 'plan-${applicationName}-${instanceNumber}'
{{#runtimeDocker}}
var acrName = 'acr${applicationName}${instanceNumber}'

// Azure Container Registry - https://docs.microsoft.com/en-us/azure/templates/microsoft.containerregistry/registries?tabs=bicep
resource containerRegistry 'Microsoft.ContainerRegistry/registries@2020-11-01-preview' = {
  name: acrName
  location: location
  tags: resourceTags
  sku: {
    name: 'Basic'
  }
  properties: {
    adminUserEnabled: true
  }
}
{{/runtimeDocker}}

resource appServicePlan 'Microsoft.Web/serverFarms@2020-12-01' = {
  name: appServicePlanName
  location: location
  tags: resourceTags
  kind: 'linux'
  properties: {
    reserved: true
  }
  sku: {
{{#applicationTierFree}}
    tier: 'Free'
    name: 'F1'
{{/applicationTierFree}}
{{#applicationTierBasic}}
    tier: 'Basic'
    name: 'B1'
{{/applicationTierBasic}}
{{#applicationTierStandard}}
    tier: 'Standard'
    name: 'S1'
{{/applicationTierStandard}}    
  }
}

// Reference: https://docs.microsoft.com/azure/templates/microsoft.web/sites?tabs=bicep
resource appServiceApp 'Microsoft.Web/sites@2020-12-01' = {
  name: 'app-${applicationName}-${environment}-${instanceNumber}'
  location: location
  tags: resourceTags
  properties: {
    serverFarmId: appServicePlan.id
    httpsOnly: true
    clientAffinityEnabled: false
    siteConfig: {
{{#applicationTierFree}}
  {{#runtimeDocker}}
      linuxFxVersion: 'DOCKER|${containerRegistry.name}.azurecr.io/${applicationName}/${applicationName}:latest'
  {{/runtimeDocker}}
  {{#runtimeJava}}
      linuxFxVersion: 'JAVA|11-java11'
  {{/runtimeJava}}
  {{#runtimeDotnet}}
      linuxFxVersion: 'DOTNETCORE|3.1'
  {{/runtimeDotnet}}
  {{#runtimeNodejs}}
      linuxFxVersion: 'NODE|14-lts'
      appCommandLine: 'npm run start:prod'
  {{/runtimeNodejs}}
      alwaysOn: true
      ftpsState: 'FtpsOnly'
      use32BitWorkerProcess: true
{{/applicationTierFree}}
{{^applicationTierFree}}
  {{#runtimeDocker}}
      linuxFxVersion: 'DOCKER|${containerRegistry.name}.azurecr.io/${applicationName}/${applicationName}:latest'
  {{/runtimeDocker}}
  {{#runtimeJava}}
      linuxFxVersion: 'JAVA|11-java11'
  {{/runtimeJava}}
  {{#runtimeDotnet}}
      linuxFxVersion: 'DOTNETCORE|3.1'
  {{/runtimeDotnet}}
  {{#runtimeNodejs}}
      linuxFxVersion: 'NODE|14-lts'
      appCommandLine: 'npm run start:prod'
  {{/runtimeNodejs}}
      alwaysOn: true
      ftpsState: 'FtpsOnly'
{{/applicationTierFree}}      
      http20Enabled: true
      minTlsVersion: '1.2'
      appSettings: union(environmentVariables, [
        { 
          name: 'WEBSITES_ENABLE_APP_SERVICE_STORAGE'
          value: false
        }
{{#runtimeNodejs}}
        ,
        { 
          name: 'WEBSITE_RUN_FROM_PACKAGE'
          value: '1'
        },
        { 
          name: 'WEBSITE_NODE_DEFAULT_VERSION'
          value: '~14'
        }
{{/runtimeNodejs}}
{{#runtimeDocker}}
        {
          name: 'DOCKER_REGISTRY_SERVER_URL'
          value: 'https://${containerRegistry.name}.azurecr.io'
        }
        {
          name: 'DOCKER_REGISTRY_SERVER_USERNAME'
          value: '${containerRegistry.name}'
        }
        {
          name: 'DOCKER_REGISTRY_SERVER_PASSWORD'
          value: listCredentials(containerRegistry.id, containerRegistry.apiVersion).passwords[0].value
        }
        {
          name: 'WEBSITES_PORT'
          value: '8080'
        }
{{/runtimeDocker}}
        ])
      }
    }
{{#addonKeyVault}}
  identity: {
    type: 'SystemAssigned'
  }
{{/addonKeyVault}}
}

// TODO AddonKeyVault - Access policy

output application_hostname string = appServiceApp.properties.hostNames[0]