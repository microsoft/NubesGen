{{=<% %>=}}
name: GitOps

###
# GitOps - automatic infrastructure management GitHub Action
#
# See https://docs.nubesgen.com/gitops/gitops-quick-start/
# for more information about using GitOps with NubesGen.
###

on:
  push:
    branches:
      - 'env-*'
<%#runtimeDotnet%>

env:
  DOTNET_VERSION: '6.0'
  APP_PACKAGE_PATH: '.' # set this to the path to your web app project, defaults to the repository root
<%/runtimeDotnet%>
<%#runtimeNodejs%>

env:
  NODEJS_VERSION: '16'
  APP_PACKAGE_PATH: '.' # set this to the path to your web app project, defaults to the repository root
<%/runtimeNodejs%>
<%#runtimePython%>

env:
  PYTHON_VERSION: '3.9'
  APP_PACKAGE_PATH: '.' # set this to the path to your web app project, defaults to the repository root
<%/runtimePython%>

jobs:
<%#runtimeDocker%>
  build-and-deploy:
<%/runtimeDocker%>
<%^runtimeDocker%>
  manage-infrastructure:
<%/runtimeDocker%>
    runs-on: ubuntu-20.04
    outputs:
      application_name: ${{ steps.infrastructure-deployment.outputs.application_name }}
      application_url: ${{ steps.infrastructure-deployment.outputs.application_url }}
      resource_group: ${{ steps.infrastructure-deployment.outputs.resource_group }}
  <%#runtimeDocker%>
      container_registry_name: ${{ steps.infrastructure-deployment.outputs.container_registry_name }}
  <%/runtimeDocker%>
  <%#applicationTypeSpringApps%>
      spring_apps_service_name: ${{ steps.infrastructure-deployment.outputs.spring_apps_service_name }}
  <%/applicationTypeSpringApps%>
<%#iacToolTerraform%>
    steps:
      - name: Apply Terraform configuration
        id: infrastructure-deployment
        uses: microsoft/nubesgen-actions/gitops-apply-terraform@<%compositeActionsVersion%>
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          tf_storage_account: ${{ secrets.TF_STORAGE_ACCOUNT }}
<%/iacToolTerraform%>
<%#iacToolBicep%>
    steps:
      - name: Apply Bicep configuration
        id: infrastructure-deployment
        uses: microsoft/nubesgen-actions/gitops-apply-bicep@<%compositeActionsVersion%>
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          project_name: '<%applicationName%>'
          deployment_region: '<%region%>'
<%/iacToolBicep%>
<%#runtimeDocker%>
  <%#applicationTypeAppService%>
    <%#runtimeSpring%>
      - name: Build and deploy a Docker image of a Spring Boot project
        uses: microsoft/nubesgen-actions/gitops-build-and-deploy-to-app-service-docker-spring@<%compositeActionsVersion%>
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          application_name: ${{ steps.infrastructure-deployment.outputs.application_name }}
          container_registry_name:  ${{ steps.infrastructure-deployment.outputs.container_registry_name }}
    <%/runtimeSpring%>
    <%#runtimeQuarkus%>
      - name: Build and deploy a Docker image of a Quarkus native project
        uses: microsoft/nubesgen-actions/gitops-build-and-deploy-to-app-service-docker-quarkus-native@<%compositeActionsVersion%>
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          application_name: ${{ steps.infrastructure-deployment.outputs.application_name }}
          container_registry_name:  ${{ steps.infrastructure-deployment.outputs.container_registry_name }}
    <%/runtimeQuarkus%>
    <%#runtimeMicronaut%>
      <%#runtimeMaven%>
      - name: Build a Micronaut Docker image project using Maven
        uses: microsoft/nubesgen-actions/gitops-build-java-maven@<%compositeActionsVersion%>
        with:
          build_command: ./mvnw clean package -Dpackaging=docker -Djib.to.image=${{ steps.infrastructure-deployment.outputs.container_registry_name }}.azurecr.io/${{ steps.infrastructure-deployment.outputs.application_name }}/${{ steps.infrastructure-deployment.outputs.application_name }}:${{ github.sha }}
      <%/runtimeMaven%>
      <%#runtimeGradle%>
      - name: Create an init script with the required image tag
        run: |
          echo 'allprojects { afterEvaluate { tasks.named("dockerBuild") { images = ["${{ steps.infrastructure-deployment.outputs.container_registry_name }}.azurecr.io/${{ steps.infrastructure-deployment.outputs.application_name }}/${{ steps.infrastructure-deployment.outputs.application_name }}:${{ github.sha }}"] } } }' > /tmp/init.gradle
        shell: bash
      - name: Build a Micronaut Docker image project using Gradle
        uses: microsoft/nubesgen-actions/gitops-build-java-gradle@<%compositeActionsVersion%>
        with:
          build_command: ./gradlew -I /tmp/init.gradle dockerBuild
      <%/runtimeGradle%>
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Push to Azure Container Registry
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          az acr login -n ${{ steps.infrastructure-deployment.outputs.container_registry_name }}.azurecr.io
          docker push ${{ steps.infrastructure-deployment.outputs.container_registry_name }}.azurecr.io/${{ steps.infrastructure-deployment.outputs.application_name }}/${{ steps.infrastructure-deployment.outputs.application_name }}:${{ github.sha }}
        shell: bash
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ steps.infrastructure-deployment.outputs.application_name }}
          images: '${{ steps.infrastructure-deployment.outputs.container_registry_name }}.azurecr.io/${{ steps.infrastructure-deployment.outputs.application_name }}/${{ steps.infrastructure-deployment.outputs.application_name }}:${{ github.sha }}'
    <%/runtimeMicronaut%>
    <%#runtimeDefault%>
      - name: Build and deploy a Docker image
        uses: microsoft/nubesgen-actions/gitops-build-and-deploy-to-app-service-docker@<%compositeActionsVersion%>
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          application_name: ${{ steps.infrastructure-deployment.outputs.application_name }}
          container_registry_name:  ${{ steps.infrastructure-deployment.outputs.container_registry_name }}
    <%/runtimeDefault%>
  <%/applicationTypeAppService%>
<%/runtimeDocker%>
<%#runtimeJava%>
  <%#applicationTypeAppService%>
  build:
    runs-on: ubuntu-20.04
    steps:
    <%#runtimeMaven%>
      - name: Build a Java project using Maven
        uses: microsoft/nubesgen-actions/gitops-build-java-maven@<%compositeActionsVersion%>
      <%#runtimeQuarkus%>
        with:
          build_command: mvn package -Pprod,azure -Dquarkus.package.type=uber-jar
          package_path: ${{ github.workspace }}/target/*.[j,w]ar
      <%/runtimeQuarkus%>
      <%#runtimeMicronaut%>
        with:
          build_command: ./mvnw clean package
          package_path: ${{ github.workspace }}/target/[^original]*.jar
      <%/runtimeMicronaut%>
    <%/runtimeMaven%>
    <%#runtimeGradle%>
      - name: Build a Java project using Gradle
        uses: microsoft/nubesgen-actions/gitops-build-java-gradle@<%compositeActionsVersion%>
      <%#runtimeSpring%>
        with:
          build_command: 'gradle bootJar -Pprod,azure'
      <%/runtimeSpring%>
      <%#runtimeQuarkus%>
        with:
          build_command: gradle quarkusBuild -Dquarkus.package.type=uber-jar
          package_path: ${{ github.workspace }}/build/libs/*-runner.jar
      <%/runtimeQuarkus%>
      <%#runtimeMicronaut%>
        with:
          build_command: ./gradlew assemble
          package_path: ${{ github.workspace }}/build/libs/*-all.jar
      <%/runtimeMicronaut%>
    <%/runtimeGradle%>
  deploy:
    needs: [manage-infrastructure, build]
    runs-on: ubuntu-20.04
    steps:
      - name: Deploy a Java application to Azure App Service
        uses: microsoft/nubesgen-actions/gitops-deploy-to-app-service-java@<%compositeActionsVersion%>
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          application_name: ${{ needs.manage-infrastructure.outputs.application_name }}
  <%/applicationTypeAppService%>
  <%#applicationTypeFunction%>
  build:
    needs: [manage-infrastructure]
    runs-on: ubuntu-20.04
    steps:
    <%#runtimeMaven%>
      - name: Build a Java function using Maven
        uses: microsoft/nubesgen-actions/gitops-build-function-java-maven@<%compositeActionsVersion%>
        with:
          resource_group: ${{ needs.manage-infrastructure.outputs.resource_group }}
          application_name: ${{ needs.manage-infrastructure.outputs.application_name }}
    <%/runtimeMaven%>
    <%#runtimeGradle%>
      - name: Build a Java function using Gradle
        uses: microsoft/nubesgen-actions/gitops-build-function-java-gradle@<%compositeActionsVersion%>
        with:
          resource_group: ${{ needs.manage-infrastructure.outputs.resource_group }}
          application_name: ${{ needs.manage-infrastructure.outputs.application_name }}
    <%/runtimeGradle%>
  deploy:
    needs: [manage-infrastructure,build]
    runs-on: ubuntu-20.04
    steps:
      - name: Deploy a Java function to Azure Functions
        uses: microsoft/nubesgen-actions/gitops-deploy-to-function-java@<%compositeActionsVersion%>
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          application_name: ${{ needs.manage-infrastructure.outputs.application_name }}
  <%/applicationTypeFunction%>
  <%#applicationTypeSpringApps%>
  build:
    runs-on: ubuntu-20.04
    steps:
    <%#runtimeMaven%>
      - name: Build a Java project using Maven
        uses: microsoft/nubesgen-actions/gitops-build-java-maven@<%compositeActionsVersion%>
    <%/runtimeMaven%>
    <%#runtimeGradle%>
      - name: Build a Java project using Gradle
        uses: microsoft/nubesgen-actions/gitops-build-java-gradle@<%compositeActionsVersion%>
        with:
          build_command: 'gradle bootJar -Pprod,azure'
    <%/runtimeGradle%>
  deploy:
    needs: [manage-infrastructure, build]
    runs-on: ubuntu-20.04
    steps:
      - name: Deploy a Java application to Azure Spring Apps
        uses: microsoft/nubesgen-actions/gitops-deploy-to-spring-apps-java@<%compositeActionsVersion%>
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          application_name: ${{ needs.manage-infrastructure.outputs.application_name }}
          spring_apps_service_name: ${{ needs.manage-infrastructure.outputs.spring_apps_service_name }}
  <%/applicationTypeSpringApps%>
<%/runtimeJava%>
<%#runtimeDotnet%>
  build:
    runs-on: ubuntu-20.04
    steps:
  <%#applicationTypeAppService%>
      - name: Build a .NET application
        uses: microsoft/nubesgen-actions/gitops-build-dotnet@<%compositeActionsVersion%>
        with:
          dotnet_version: ${{ env.DOTNET_VERSION }}
          application_package_path: ${{ env.APP_PACKAGE_PATH }}
  <%/applicationTypeAppService%>
  <%#applicationTypeFunction%>
      - name: Build a .NET serverless function
        uses: microsoft/nubesgen-actions/gitops-build-function-dotnet@<%compositeActionsVersion%>
        with:
          dotnet_version: ${{ env.DOTNET_VERSION }}
          application_package_path: ${{ env.APP_PACKAGE_PATH }}
  <%/applicationTypeFunction%>
  deploy:
    needs: [manage-infrastructure, build]
    runs-on: ubuntu-20.04
    steps:
  <%#applicationTypeAppService%>
      - name: Deploy a .NET application to Azure App Service
        uses: microsoft/nubesgen-actions/gitops-deploy-to-app-service-dotnet@<%compositeActionsVersion%>
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          application_name: ${{ needs.manage-infrastructure.outputs.application_name }}
  <%/applicationTypeAppService%>
  <%#applicationTypeFunction%>
      - name: Deploy a .NET function to Azure Functions
        uses: microsoft/nubesgen-actions/gitops-deploy-to-function-dotnet@<%compositeActionsVersion%>
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          application_name: ${{ needs.manage-infrastructure.outputs.application_name }}
  <%/applicationTypeFunction%>
<%/runtimeDotnet%>
<%#runtimeNodejs%>
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Build a NodeJS project
        uses: microsoft/nubesgen-actions/gitops-build-nodejs@<%compositeActionsVersion%>
        with:
          nodejs_version: ${{ env.NODEJS_VERSION }}
          application_package_path: ${{ env.APP_PACKAGE_PATH }}
  deploy:
    needs: [manage-infrastructure, build]
    runs-on: ubuntu-20.04
    steps:
  <%#applicationTypeAppService%>
      - name: Deploy a NodeJS application to Azure App Service
        uses: microsoft/nubesgen-actions/gitops-deploy-to-app-service-nodejs@<%compositeActionsVersion%>
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          application_name: ${{ needs.manage-infrastructure.outputs.application_name }}
  <%/applicationTypeAppService%>
  <%#applicationTypeFunction%>
      - name: Deploy a NodeJS application to Azure Functions
        uses: microsoft/nubesgen-actions/gitops-deploy-to-function-nodejs@<%compositeActionsVersion%>
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          application_name: ${{ needs.manage-infrastructure.outputs.application_name }}
  <%/applicationTypeFunction%>
<%/runtimeNodejs%>
<%#runtimePython%>
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Build a Python project
        uses: microsoft/nubesgen-actions/gitops-build-python@<%compositeActionsVersion%>
        with:
          python_version: ${{ env.PYTHON_VERSION }}
          application_package_path: ${{ env.APP_PACKAGE_PATH }}
  deploy:
    needs: [manage-infrastructure, build]
    runs-on: ubuntu-20.04
    steps:
  <%#applicationTypeAppService%>
      - name: Deploy a Python application to Azure App Service
        uses: microsoft/nubesgen-actions/gitops-deploy-to-app-service-python@<%compositeActionsVersion%>
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          application_name: ${{ needs.manage-infrastructure.outputs.application_name }}
  <%/applicationTypeAppService%>
  <%#applicationTypeFunction%>
      - name: Deploy a Python application to Azure Functions
        uses: microsoft/nubesgen-actions/gitops-deploy-to-function-python@<%compositeActionsVersion%>
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          application_name: ${{ needs.manage-infrastructure.outputs.application_name }}
  <%/applicationTypeFunction%>
<%/runtimePython%>
  display-information:
<%#runtimeDocker%>
    needs: [build-and-deploy]
<%/runtimeDocker%>
<%^runtimeDocker%>
    needs: [manage-infrastructure]
<%/runtimeDocker%>
    runs-on: ubuntu-20.04
    steps:
      - name: Display Azure infrastructure information
        uses: microsoft/nubesgen-actions/gitops-display-information@v0.10.0
        with:
<%#runtimeDocker%>
          application_name: ${{ needs.build-and-deploy.outputs.application_name }}
          application_url: ${{ needs.build-and-deploy.outputs.application_url }}
          resource_group: ${{ needs.build-and-deploy.outputs.resource_group }}
<%/runtimeDocker%>
<%^runtimeDocker%>
          application_name: ${{ needs.manage-infrastructure.outputs.application_name }}
          application_url: ${{ needs.manage-infrastructure.outputs.application_url }}
          resource_group: ${{ needs.manage-infrastructure.outputs.resource_group }}
<%/runtimeDocker%>
